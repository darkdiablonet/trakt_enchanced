name: Docker

on:
  schedule:
    - cron: '44 0 * * *'
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      push:
        description: 'Whether to push the built image to the registry (true/false).'
        required: false
        default: 'true'
      registry:
        description: 'Registry to use (e.g. ghcr.io or docker.io). Leave empty to use default ghcr.io.'
        required: false
        default: ''
      image_name:
        description: 'Image name (owner/repo). Leave empty to use repository name.'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare runtime variables
        id: prepare
        run: |
          # Expand inputs (empty string if not provided)
          REGISTRY_INPUT="${{ github.event.inputs.registry }}"
          IMAGE_INPUT="${{ github.event.inputs.image_name }}"
          PUSH_INPUT="${{ github.event.inputs.push }}"

          # Defaults
          if [ -z "$REGISTRY_INPUT" ]; then
            REGISTRY="ghcr.io"
          else
            REGISTRY="$REGISTRY_INPUT"
          fi

          if [ -z "$IMAGE_INPUT" ]; then
            IMAGE_NAME="${{ github.repository }}"
          else
            IMAGE_NAME="$IMAGE_INPUT"
          fi

          # Decide whether to push:
          # - always push for real push events
          # - for manual dispatch, use the 'push' input (default true)
          if [ "${{ github.event_name }}" = "push" ]; then
            SHOULD_PUSH="true"
          else
            # For non-push events (workflow_dispatch / schedule / pull_request), respect PUSH_INPUT (default 'true' for manual)
            if [ -z "$PUSH_INPUT" ] || [ "$PUSH_INPUT" = "true" ]; then
              SHOULD_PUSH="true"
            else
              SHOULD_PUSH="false"
            fi
          fi

          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "SHOULD_PUSH=$SHOULD_PUSH" >> $GITHUB_ENV

      # Install cosign only if we will push/sign
      - name: Install cosign
        if: env.SHOULD_PUSH == 'true'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry
        if: env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ env.SHOULD_PUSH == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: env.SHOULD_PUSH == 'true'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
